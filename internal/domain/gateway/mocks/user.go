// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_gateway is a generated GoMock package.
package mocks

import (
	entity "MoneyControl/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserGateway is a mock of UserGateway interface.
type MockUserGateway struct {
	ctrl     *gomock.Controller
	recorder *MockUserGatewayMockRecorder
}

// MockUserGatewayMockRecorder is the mock recorder for MockUserGateway.
type MockUserGatewayMockRecorder struct {
	mock *MockUserGateway
}

// NewMockUserGateway creates a new mock instance.
func NewMockUserGateway(ctrl *gomock.Controller) *MockUserGateway {
	mock := &MockUserGateway{ctrl: ctrl}
	mock.recorder = &MockUserGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGateway) EXPECT() *MockUserGatewayMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserGateway) CreateUser(user *entity.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserGatewayMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserGateway)(nil).CreateUser), user)
}

// DeleteUserByID mocks base method.
func (m *MockUserGateway) DeleteUserByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserGatewayMockRecorder) DeleteUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserGateway)(nil).DeleteUserByID), id)
}

// ReadUserByID mocks base method.
func (m *MockUserGateway) ReadUserByID(id int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserByID", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserByID indicates an expected call of ReadUserByID.
func (mr *MockUserGatewayMockRecorder) ReadUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserByID", reflect.TypeOf((*MockUserGateway)(nil).ReadUserByID), id)
}

// UpdateUser mocks base method.
func (m *MockUserGateway) UpdateUser(user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserGatewayMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserGateway)(nil).UpdateUser), user)
}
