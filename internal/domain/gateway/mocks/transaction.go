// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "MoneyControl/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionGateway is a mock of TransactionGateway interface.
type MockTransactionGateway struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionGatewayMockRecorder
}

// MockTransactionGatewayMockRecorder is the mock recorder for MockTransactionGateway.
type MockTransactionGatewayMockRecorder struct {
	mock *MockTransactionGateway
}

// NewMockTransactionGateway creates a new mock instance.
func NewMockTransactionGateway(ctrl *gomock.Controller) *MockTransactionGateway {
	mock := &MockTransactionGateway{ctrl: ctrl}
	mock.recorder = &MockTransactionGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionGateway) EXPECT() *MockTransactionGatewayMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionGateway) CreateTransaction(transaction *entity.Transaction) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionGatewayMockRecorder) CreateTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionGateway)(nil).CreateTransaction), transaction)
}

// DeleteTransactionByID mocks base method.
func (m *MockTransactionGateway) DeleteTransactionByID(id uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionByID", id)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTransactionByID indicates an expected call of DeleteTransactionByID.
func (mr *MockTransactionGatewayMockRecorder) DeleteTransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionByID", reflect.TypeOf((*MockTransactionGateway)(nil).DeleteTransactionByID), id)
}

// ReadTransactionByID mocks base method.
func (m *MockTransactionGateway) ReadTransactionByID(id uint) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTransactionByID", id)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransactionByID indicates an expected call of ReadTransactionByID.
func (mr *MockTransactionGatewayMockRecorder) ReadTransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransactionByID", reflect.TypeOf((*MockTransactionGateway)(nil).ReadTransactionByID), id)
}

// ReadTransactionsPagination mocks base method.
func (m *MockTransactionGateway) ReadTransactionsPagination(limit, cursos int) ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTransactionsPagination", limit, cursos)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransactionsPagination indicates an expected call of ReadTransactionsPagination.
func (mr *MockTransactionGatewayMockRecorder) ReadTransactionsPagination(limit, cursos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransactionsPagination", reflect.TypeOf((*MockTransactionGateway)(nil).ReadTransactionsPagination), limit, cursos)
}

// UpdateTransactionByID mocks base method.
func (m *MockTransactionGateway) UpdateTransactionByID(id uint) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByID", id)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionByID indicates an expected call of UpdateTransactionByID.
func (mr *MockTransactionGatewayMockRecorder) UpdateTransactionByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByID", reflect.TypeOf((*MockTransactionGateway)(nil).UpdateTransactionByID), id)
}
